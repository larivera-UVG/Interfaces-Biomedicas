
% -------------------------------------------------------------------------
% Autor: José Pablo Muñoz (Extraído del Neural Network App)
% Descripción: Código para entrenar una red neuronal
% -------------------------------------------------------------------------
% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 12-Aug-2019 23:03:26
%
% This script assumes these variables are defined:
%
%   Input_Vector - input data.
%   Target_Vector - target data.

% x = Input_VectorTrain;%16*531
% t = Target_VectorTrain;%5*531

x = clasTrain(:,1:end-1)';%16*531
t = labTrain';%5*531

% x = clasTrain(:,1:end-1)';        
% t = labelRn(1:6372,:)';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
hiddenLayerSize = 10;
net = patternnet(hiddenLayerSize, trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y);
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);

result_1 = round(100 - 100*percentErrors,1);
% View the Network
%view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotconfusion(t,y)
%figure, plotroc(t,y)

%% Probar RN
% xs_prueba = Input_VectorTrain; % 10 datos al azar
% ys_prueba = net(xs_prueba);
% clases_prueba = vec2ind(ys_prueba); % contiene las etiquetas asignadas
% yResp = full(ind2vec(clases_prueba));
% 
% figure(9); clf;
% plotconfusion(Target_VectorTrain,yResp);

%% Sleep pruebas

% xs_prueba = clasPred(:,1:end-1)'; % 10 datos al azar
% ys_prueba = net(xs_prueba);
% clases_prueba = vec2ind(ys_prueba); % contiene las etiquetas asignadas
% yResp = full(ind2vec(clases_prueba));
% 
% figure(9); clf;
% plotconfusion(labPred',yResp);
% % 
% % xs_prueba = clasPred(:,1:end-1)';
% % ys_prueba = net(xs_prueba);
% % clases_prueba = vec2ind(ys_prueba); % contiene las etiquetas asignadas
% % 
% % figure(1); clf;
% % s = confusionchart(vec2ind(labPred'),clases_prueba);
% % s.Title = 'Matriz de confusión RN';
% % s.RowSummary = 'row-normalized';
% % s.ColumnSummary = 'column-normalized';